Note: Many questions about arrays and strings are interchangeable in their solutions.
In other words, solutions applicable to problems about arrays are also applicable
to problems about strings, and vice versa.


Hash Tables:

Hash tables are data structures that map keys to values through the use of a hash
function. One way of implementing them is to have a hash function with an array of
Linked Lists.

Insertion: The input key is used in the hash function to generate a hash value, which
	is then used as the index to access the underlying array. At that element in the
	array is a Linked List (typically, to resolve any collisions that may occur between
	two keys with the same hash value). The value is placed at the end of that Linked
	List.

Find: The same hash process is used to transform the key into the position in the
	array. The specific Linked List is then searched to find the desired value.

Average Runtime: O(1), assuming that no collisions occur.
Worst-case Runtime: O(n), assuming that all key value pairs map to the same hash
	value and are placed in the same Linked List. In both insertion and find, the
	algorithm needs to look through the entire Linked List to insert a new value
	or verify if that value exists.


Resizable Arrays:

Resizable arrays are arrays that have a fixed size on initialization and provide a
O(1) access runtime, but increase in size when the size limit is hit. For example,
the ArrayList object in Java will double in size when the size limit is hit.

Because the resizable array is still in contiguous memory, the array must first
allocate an increased amount of memory elsewhere, and then copy all of its contents 
over to that part of the memory - a O(n) operation. However, resizing is such a rare 
operation that the amortized runtime for insertion is still O(1), as the O(n) operation
happens every n insertions.

Average Runtime: O(1), for both insertion and find.	


Immutable Strings and StringBuilder:

In most programming languages, strings are immutable objects. So, if n strings of
length x were to be concatenated together, the two input strings would need to be
copied, and then one of the strings would be copied to the other, character by
character.

On the first iteration, x characters would be copied, then 2x characters,
then 3x characters, and so on, increasing as the size of the string increases. The
full runtime would be O(x + 2x + 3x + ... + nx), which would simplify to 
O((((n)(n+1))/2) * x) or O(xn^2).

For this reason, classes like StringBuilder are used, which takes in strings, places
them in a resizeable string, and only copies them back to a string when necessary.

Note: C++ strings are mutable.